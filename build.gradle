plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.2'
    id 'io.spring.dependency-management' version '1.1.6'
    id 'jacoco'
    // https://plugins.gradle.org/plugin/org.sonarqube
    id 'org.sonarqube' version '5.1.0.4882'
    // https://docs.gradle.org/current/userguide/checkstyle_plugin.html
    id 'checkstyle'
    // https://plugins.gradle.org/plugin/org.owasp.dependencycheck
    id 'org.owasp.dependencycheck' version '10.0.3'
    id 'com.github.ben-manes.versions' version "0.51.0"
    id 'se.patrikerdes.use-latest-versions' version '0.2.18'
}

group = 'es.in2'
version = '0.1.0'

java {
    sourceCompatibility = '17'
}

jacoco {
    toolVersion = "0.8.9"
}

checkstyle {
    toolVersion = '10.16.0'
    configFile = file("${rootDir}/config/checkstyle/checkstyle.xml")
}

checkstyleMain {
    source = 'src/main/java'
}

checkstyleTest {
    source = 'src/test/java'
}

sonar {
    properties {
        property "sonar.projectName", "DSS API"
        property "sonar.projectKey", "in2workspace_in2-dss-api"
        property "sonar.organization", "in2workspace"
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.coverage.exclusions",
                "src/main/java/es/in2/desmos/DSSApplication.java"
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    // Starters
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    //Europa DSS https://ec.europa.eu/digital-building-blocks/DSS/webapp-demo/doc/dss-documentation.html
    implementation 'eu.europa.ec.joinup.sd-dss:dss-jades:6.1.RC1'
    implementation 'eu.europa.ec.joinup.sd-dss:dss-token:6.1.RC1'
    implementation 'eu.europa.ec.joinup.sd-dss:dss-service:6.1.RC1'
    implementation 'eu.europa.ec.joinup.sd-dss:dss-utils-google-guava:6.0'
    implementation 'eu.europa.ec.joinup.sd-dss:dss-tsl-validation:6.0'
    // HashiCorp Vault
    implementation 'org.springframework.vault:spring-vault-core:3.1.2'
    // Logs
    compileOnly 'org.projectlombok:lombok:1.18.34'
    annotationProcessor 'org.projectlombok:lombok:1.18.34'
    implementation 'net.logstash.logback:logstash-logback-encoder:8.0'
    // Documentation
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.2.0'
    // JSON
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.17.0'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.17.2'
    // Crypto
    implementation 'org.bouncycastle:bcpkix-jdk18on:1.77'
    implementation 'com.sun.xml.bind:jaxb-core:2.3.0.1'
    implementation 'javax.xml.bind:jaxb-api:2.3.1'
    implementation 'com.sun.xml.bind:jaxb-impl:2.3.1'
    implementation 'org.javassist:javassist:3.25.0-GA'
    // COSE
    implementation 'io.github.ehn-digital-green-development:base45:0.0.3'
    implementation 'org.apache.commons:commons-compress:1.26.0'
    implementation 'com.upokecenter:cbor:4.5.2'
    implementation 'com.augustcellars.cose:cose-java:1.1.0'
    // Test
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
}

tasks.named('compileJava') {
    inputs.files(tasks.named('processResources'))
}

tasks.named('test') {
    useJUnitPlatform()
    finalizedBy(tasks.jacocoTestReport)
}

tasks.jacocoTestReport {
    dependsOn(tasks.test)
    reports {
        xml.required.set(true)
        csv.required.set(false)
        html.outputLocation.set(layout.buildDirectory.dir("jacocoHtml"))
    }
    classDirectories.setFrom(files(classDirectories.files.collect {
        fileTree(dir: it, exclude: [
                '**/In2RemoteSignatureApplication**',
                '**/config/**',
                '**/enums/**'
        ])
    }))
}

tasks.register('checkstyle') {
    reports {
        xml.required = false
        html.required = true
    }
}

tasks.register('printVersion') {
    doLast {
        println version
    }
}

tasks.register('printProjectName') {
    doLast {
        println rootProject.name
    }
}

tasks.named("dependencyUpdates").configure {
    rejectVersionIf {
        isNonStable(it.candidate.version)
    }
}

// Dependency Maintenance
def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { it -> version.toUpperCase().contains(it) }
    def regex = /^[0-9,.v-]+(-r)?$/
    return !stableKeyword && !(version ==~ regex)
}
